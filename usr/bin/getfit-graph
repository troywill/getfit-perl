#!/usr/bin/env perl
use warnings;
use strict;
use lib '/usr/lib/perl5';
use lib '/usr/lib/perl5/Getfit';
use PDF::API3::Compat::API2;
use PDF::API3::Compat::API2::Util;
use Getfit::ConfigReader::Simple;
use Getfit::Statistics;
my $config_file = shift or die "# e.g. /var/lib/getfit-troy/troy.conf: $!";
my $graph_constants = '/var/lib/getfit-perl/graph_constants.conf';

#################### Begin Config Section ##################
my $config = ConfigReader::Simple->new($config_file);
my $config_graph = ConfigReader::Simple->new($graph_constants);
my $initial_time = $config->get('START_TIME');
my $OUTFILE = $config->get('OUTFILE');
########### Graph Constants
my $SCALE_DATA_FILE=$config->get('SCALE_DATA_FILE');
my $MIN_WEIGHT=$config->get('GRAPH_MIN_WEIGHT');
my $MAX_WEIGHT=$config->get('GRAPH_MAX_WEIGHT');
my $START_TIME=$config->get('START_TIME');
my $START_WEIGHT=$config->get('START_WEIGHT');
my $MIN_TIME = $START_TIME;
my $MAX_TIME = $config->get('GRAPH_MAX_TIME');

#### LEGEND AND VIEWPORT VALUES ####
my $XMAX = $config_graph->get('XMAX');
my $YMAX = $config_graph->get('YMAX');

my $SPACE_LEFT=$config_graph->get('SPACE_LEFT');
my $SPACE_RIGHT=$config_graph->get('SPACE_RIGHT');
my $SPACE_TOP=$config_graph->get('SPACE_TOP');
my $SPACE_BOTTOM=$config_graph->get('SPACE_BOTTOM');

my $VIEWPORT_LEFT = $SPACE_LEFT;
my $VIEWPORT_RIGHT = $XMAX - $SPACE_RIGHT;
my $VIEWPORT_TOP = $YMAX - $SPACE_TOP;
my $VIEWPORT_BOTTOM = $SPACE_BOTTOM;

my $font_height = 8;
my $spacer = 2;

# Circle Constants
my $RADIUS = .5;

my $TEXT_LEFT = 40;
my $TEXT_TOP = $VIEWPORT_BOTTOM - 18;

#################### End Config Section ##################

my $pdf=PDF::API3::Compat::API2->new;
my $font=$pdf->corefont('Verdana');
my $page = $pdf->page;
$page->mediabox(792,612); # Letter Landscape
my $gfx=$page->gfx;

my $FILTER_TOP = 580;
my $FILTER_BOTTOM = 350;
$FILTER_TOP = 400;
$FILTER_BOTTOM = 350;
&plot_start_weight;
&plot_weights;
&plot_filter_weights;
&draw_legend;
&draw_rectangle( $VIEWPORT_LEFT, $VIEWPORT_RIGHT, $VIEWPORT_TOP, $VIEWPORT_BOTTOM );
&draw_rectangle( $VIEWPORT_LEFT, $VIEWPORT_RIGHT, $FILTER_TOP, $FILTER_BOTTOM );
&draw_goal_line;
&draw_top_goal_line;

$pdf->saveas($OUTFILE);
$pdf->end();

########## Begin: Filter sub routines ###########
sub calculate_filter_plot_point {
    my ( $weight, $time ) = @_;
    my ( $xscale, $yscale ) = &filter_scale;
    my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );
    my $y = $FILTER_BOTTOM + $yscale * ( $weight - $MIN_WEIGHT );
    return ( $x, $y );
}

sub filter_scale {
    my $points_per_pound =  ( $FILTER_TOP - $FILTER_BOTTOM ) / ( $MAX_WEIGHT - $MIN_WEIGHT );
    my $points_per_second = ( $VIEWPORT_RIGHT - $VIEWPORT_LEFT ) / ( $MAX_TIME - $MIN_TIME );
    return ( $points_per_second, $points_per_pound );
}

sub plot_filter_weights {
    open( my $OUT, '<', $SCALE_DATA_FILE ) or die "Unable to open data file: $!";
    $_ = <$OUT>;
    my ( $time, $weight ) = split();
    my ( $x, $y ) = &calculate_filter_plot_point ( $weight, $time );
    $gfx->circle($x,$y,$RADIUS);
    $gfx->move($x,$y);
    while (<$OUT>) {
	my ( $time, $weight ) = split;
	my ( $x, $y ) = &calculate_filter_plot_point ( $weight, $time );
	$gfx->line($x,$y);
	$gfx->circle($x,$y,$RADIUS);
	$gfx->move($x,$y);
    }
    $gfx->stroke;
}

########## End: Filter sub routines ###########

sub draw_legend {
    ################# Text ##########
    my $LEGEND_LEFT = $config_graph->get('LEGEND_LEFT');
    my ( $x, $y ) = &calculate_plot_point ( $MAX_WEIGHT, 0);
    $gfx->textlabel($LEGEND_LEFT,$y-$font_height/2,$font,$font_height,$MAX_WEIGHT);
    ( $x, $y ) = &calculate_plot_point ( $MIN_WEIGHT, 0);
    $gfx->textlabel($LEGEND_LEFT,$y-$font_height/2,$font,$font_height,$MIN_WEIGHT);
    $gfx->textlabel($TEXT_LEFT,$TEXT_TOP,$font,$font_height,"Troy Will");
    my $current_goal = sprintf( "%.2f", $Marv::Statistics::Current_goal);
    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-$font_height),$font,$font_height,  "Current Goal: $current_goal");
# $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-$font_height),$font,$font_height,  "Beginning Unix Time: ");
    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-2*$font_height),$font,$font_height,"Beginning Weight: 183.6");
    chomp( my $date = `date` );
    my $string = 'Current Unix Time: ' . time . " ($date)";
    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-3*$font_height),$font,$font_height,$string);
    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-4*$font_height),$font,$font_height,"Current Weight: $current_goal");
}

sub calculate_plot_point {
    my ( $weight, $time ) = @_;
    my ( $xscale, $yscale ) = &scale;
    my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );
    my $y = $VIEWPORT_BOTTOM + $yscale * ( $weight - $MIN_WEIGHT );
    return ( $x, $y );
}

sub scale {
    my $points_per_pound =  ( $VIEWPORT_TOP - $VIEWPORT_BOTTOM ) / ( $MAX_WEIGHT - $MIN_WEIGHT );
    my $points_per_second = ( $VIEWPORT_RIGHT - $VIEWPORT_LEFT ) / ( $MAX_TIME - $MIN_TIME );
    return ( $points_per_second, $points_per_pound );
}

sub plot_start_weight {
    my ( $x, $y ) = &calculate_plot_point ( $START_WEIGHT, $START_TIME );
    $gfx->circle($x,$y,$RADIUS);
}

sub plot_weights {
    open( my $OUT, '<', $SCALE_DATA_FILE ) or die "Unable to open data file: $!";
    $_ = <$OUT>;
    my ( $time, $weight ) = split();
    my ( $x, $y ) = &calculate_plot_point ( $weight, $time );
    $gfx->circle($x,$y,$RADIUS);
    $gfx->move($x,$y);
    while (<$OUT>) {
	my ( $time, $weight ) = split;
	my ( $x, $y ) = &calculate_plot_point ( $weight, $time );
	$gfx->line($x,$y);
	$gfx->circle($x,$y,$RADIUS);
	$gfx->move($x,$y);
    }
    $gfx->stroke;
    close $OUT;
}

sub draw_rectangle {
    my ( $left, $right, $top, $bottom ) = @_;
    $gfx->move($left,$top);
    $gfx->line($right, $top);
    $gfx->line($right,$bottom);
    $gfx->line($left, $bottom);
    $gfx->line($left, $top);
    $gfx->stroke;
}

sub draw_goal_line {
    my $time = time;
    my $CALS_PER_DAY=$config->get('CALS_PER_DAY');
    my $GOAL_START_TIME = $config->get('GOAL_START_TIME');
    my $GOAL_START_WEIGHT = $config->get('GOAL_START_WEIGHT');
    my ( $x1, $y1 ) = &calculate_plot_point (  $GOAL_START_WEIGHT, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    $gfx->linedash(2,4);

    my $goal_weight = $GOAL_START_WEIGHT - ( $MAX_TIME - $GOAL_START_TIME ) * ( $CALS_PER_DAY / 3500 / 86400 );
    my ( $x2, $y2 ) = &calculate_plot_point ( $goal_weight, $MAX_TIME );
    $gfx->line($x2,$y2);
    $gfx->stroke;
}

sub draw_top_goal_line {
    my $time = time;
    my $TOP_GOAL_WEIGHT=$config->get('TOP_GOAL_WEIGHT');
    my $TOP_GOAL_TIME=$config->get('TOP_GOAL_TIME');
    my $TOP_GOAL_CALORIES=$config->get('TOP_GOAL_CALORIES');
    my ( $x, $y ) = &calculate_plot_point ( $TOP_GOAL_WEIGHT, $TOP_GOAL_TIME );
    $gfx->move($x,$y);
    $gfx->linedash(2,4);
    my $goal_weight = $TOP_GOAL_WEIGHT - ( $MAX_TIME - $TOP_GOAL_TIME ) * ( $TOP_GOAL_CALORIES / 3500 / 86400 );
    my ( $x1, $y1 ) = &calculate_plot_point ( $goal_weight, $MAX_TIME );
    $gfx->line($x1,$y1);
    $gfx->strokecolor('#FF0000');
    $gfx->stroke;
}

exit;
