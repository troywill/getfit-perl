#!/usr/bin/env perl
use warnings;
use strict;
use lib '/usr/lib/perl5';
use lib '/usr/lib/perl5/Getfit';
use PDF::API3::Compat::API2;
use PDF::API3::Compat::API2::Util;
use Getfit::ConfigReader::Simple;
use Getfit::Statistics;
my $config_file = $ARGV[0] or die "# e.g. /var/lib/getfit-troy/troy.conf: $!";
my $days = $ARGV[1] or die "Please supply number of days";

my $graph_constants = '/var/lib/getfit-perl/graph_constants.conf';

#################### Begin Config Section ##################
my $config = ConfigReader::Simple->new($config_file);
my $config_graph = ConfigReader::Simple->new($graph_constants);
my $initial_time = $config->get('START_TIME');
my $OUTFILE_DIR = $config->get('OUTFILE_DIR');
my $OUTFILE_BASE = $config->get('OUTFILE_BASE');
########### Graph Constants
my $LEGEND_LEFT = $config_graph->get('LEGEND_LEFT');
my $GOAL_START_TIME = $config->get('GOAL_START_TIME');
my $GOAL_START_WEIGHT = $config->get('GOAL_START_WEIGHT');
my $SCALE_DATA_FILE=$config->get('SCALE_DATA_FILE');
my $MIN_WEIGHT=$config->get('GRAPH_MIN_WEIGHT');
my $MAX_WEIGHT=$config->get('GRAPH_MAX_WEIGHT');
my $START_TIME=$config->get('START_TIME');
my $START_WEIGHT=$config->get('START_WEIGHT');
my $MIN_TIME = $START_TIME;
my $MAX_TIME = $config->get('GRAPH_MAX_TIME');

#### LEGEND AND VIEWPORT VALUES ####
my $XMAX = $config_graph->get('XMAX');
my $YMAX = $config_graph->get('YMAX');

my $SPACE_LEFT=$config_graph->get('SPACE_LEFT');
my $SPACE_RIGHT=$config_graph->get('SPACE_RIGHT');
my $SPACE_TOP=$config_graph->get('SPACE_TOP');
my $SPACE_BOTTOM=$config_graph->get('SPACE_BOTTOM');

my $VIEWPORT_LEFT = $SPACE_LEFT;
my $VIEWPORT_RIGHT = $XMAX - $SPACE_RIGHT;
my $VIEWPORT_TOP = $YMAX - $SPACE_TOP;
my $VIEWPORT_BOTTOM = $SPACE_BOTTOM;

my $font_height = 8;
my $spacer = 2;

# Circle Constants
my $RADIUS = .6;

my $TEXT_LEFT = 40;
my $TEXT_TOP = $VIEWPORT_BOTTOM - 18;

#################### End Config Section ##################

my $pdf=PDF::API3::Compat::API2->new;
my $font=$pdf->corefont('Verdana');
my $page = $pdf->page;
$page->mediabox(792,612); # Letter Landscape
my $gfx=$page->gfx;

my $FILTER_TOP=$config->get('FILTER_TOP');
my $FILTER_BOTTOM=$config->get('FILTER_BOTTOM');
my $FILTER_GRAPH_MAX_WEIGHT=$config->get('FILTER_GRAPH_MAX_WEIGHT');
my $FILTER_GRAPH_MIN_WEIGHT=$config->get('FILTER_GRAPH_MIN_WEIGHT');

my $SEVEN_DAY_START=$config->get('SEVEN_DAY_START');
my $FILTER_DATA_FILE = $config->get('FILTER_DATA_FILE');
my $SEVEN_DAY_RAW_DATA_FILE = $config->get('SEVEN_DAY_RAW_DATA_FILE');

## Main ##
my $now = time;
my $start_time = $now - 86400 * $days;

&generate_segment_data_file( $start_time, $FILTER_DATA_FILE, $SEVEN_DAY_RAW_DATA_FILE );
my ( $max_weight, $min_weight, $min_time, $max_time ) = &Getfit::Statistics::calculate_weight_range($SEVEN_DAY_RAW_DATA_FILE);
my $string = " Max/min( $max_weight, $min_weight, $min_time, $max_time )";
my $view_width = 792-50-50;
my $view_height = 612-50-50;
&Getfit::Statistics::plot_file( $SEVEN_DAY_RAW_DATA_FILE, 50, 50, $view_width, $view_height, $gfx );

# Plot Goal Line
my $TOP_GOAL_TIME = $config->get('TOP_GOAL_TIME');
my $TOP_GOAL_CALORIES = $config->get('TOP_GOAL_CALORIES');
my $TOP_GOAL_WEIGHT = $config->get('TOP_GOAL_WEIGHT');

my $rate = ( $TOP_GOAL_CALORIES / 3500 / 86400 );
my ( $xscale, $yscale ) = &Getfit::Statistics::graph_scale( $view_width, $view_height, $min_weight, $max_weight, $min_time, $max_time );

# $w1, $w2: Goal weight at $min_time, $max_time
my $w1 = &goal_weight( $min_time, $TOP_GOAL_TIME, $TOP_GOAL_WEIGHT, $TOP_GOAL_CALORIES );
my $w2 = &goal_weight( $max_time, $TOP_GOAL_TIME, $TOP_GOAL_WEIGHT, $TOP_GOAL_CALORIES );

sub goal_weight {
    my ( $t, $t0, $w0, $rate ) = @_;
    my $goal_weight = $w0 - ( $MAX_TIME - $GOAL_START_TIME ) * ( $CALS_PER_DAY / 3500 / 86400 );
    return ( $weight );
}

my ( $px1, $py1 ) = &Getfit::Statistics::calculate_plot_point( $w1, $min_time, $min_weight, $min_time, 50, 50, $xscale, $yscale);
my ( $px2, $py2 ) = &Getfit::Statistics::calculate_plot_point( $w2, $max_time, $min_weight, $min_time, 50, 50, $xscale, $yscale);
$gfx->move($px1,$py1);
$gfx->line($px2,$py2);
$gfx->stroke;

$gfx->textlabel(60,90,$font,$font_height,$TOP_GOAL_CALORIES);
$gfx->textlabel(60,80,$font,$font_height,$string);
$gfx->textlabel(60,70,$font,$font_height,$max_weight);
$gfx->textlabel(60,60,$font,$font_height,$min_weight);

my $outfile = $OUTFILE_DIR . '/' . $OUTFILE_BASE . '-' . time . '.pdf';
$pdf->saveas($outfile);
$pdf->end();

exit;

sub plot_segment_weights {
    my ( $input_file, $start_time, $end_time, $min_weight, $max_weight ) = @_;
    $MAX_TIME = time;
    my ( $xscale, $yscale ) = &graph_scale( $VIEWPORT_TOP, $VIEWPORT_BOTTOM, $VIEWPORT_LEFT, $VIEWPORT_RIGHT, $min_weight, $max_weight, $min_time, $MAX_TIME );
    print "DEBUG: $xscale\t$yscale\n";
    open( my $OUT, '<', $input_file ) or die "Unable to open data file: $!";
    $_ = <$OUT>;
    my ( $time, $weight ) = split();
    my ( $x, $y ) = &calculate_segment_plot_point ( $weight, $time, $start_time, $min_weight, $xscale, $yscale );
    $gfx->circle($x,$y,$RADIUS);
    $gfx->move($x,$y);
    while (<$OUT>) {
	my ( $time, $weight ) = split;
	( $x, $y ) = &calculate_segment_plot_point ( $weight, $time, $start_time, $min_weight, $xscale, $yscale );
	$gfx->line($x,$y);
	$gfx->circle($x,$y,$RADIUS+1);
	$gfx->move($x,$y);
    }
    $gfx->circle($x,$y,2);
    $gfx->stroke;
    close $OUT;
}

sub calculate_segment_plot_point {
    my ( $weight, $time, $MIN_TIME, $MIN_WEIGHT, $xscale, $yscale ) = @_;
    my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );
    print "DEBUG L116: my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );\n";
    my $y = $VIEWPORT_BOTTOM + $yscale * ( $weight - $MIN_WEIGHT );
    return ( $x, $y );
}

sub generate_segment_data_file {
    my ( $start_time,  $INPUT_FILE, $OUTPUT_FILE ) = @_;
    open ( my $input_file, '<', $INPUT_FILE ) or die "Unable to open $INPUT_FILE for reading: $!";
    open ( my $output_file, '>', $OUTPUT_FILE ) or die "Unable to open $OUTPUT_FILE  for writing: $!";
    my $transition = 'no';
    my ( $previous_time, $previous_weight ) = ( 0, 0 );
    while (<$input_file>) {
	my ( $time, $weight ) = split;
	if ( $time < $start_time ) {
	} else {
	    if ( $transition eq 'no' ) {
		my ( $t, $w ) = &calculate_transition ( $previous_time, $previous_weight, $time, $weight, $start_time );
		print $output_file "$t $w\n";
		$transition = 'yes';
	    }
	    print $output_file "$time $weight\n";
	}
	( $previous_time, $previous_weight ) = ( $time, $weight );
    }
}

sub calculate_transition {
    my ( $t0, $w0, $t2, $w2, $t1 ) = @_;
    print "=> ( $t0, $w0, $t2, $w2, $t1 )\n";
    my $w1 = $w0 + ( $w2 - $w0 ) * ( $t1 - $t0 ) / ( $t2 - $t0 );
    return ( $t1, $w1 );
}

########## Analysis Subroutines ##########

sub get_filter_weight {
    my $FILTER_DATA_FILE = $config->get('FILTER_DATA_FILE');
    open( my $in, '<', $FILTER_DATA_FILE ) or die "Unable to open FILTER_DATA_FILE <$FILTER_DATA_FILE> for input: $!";
    while (<$in>) {
	my ( $filter_weight, $time ) = split $_;
	print "DEBUG: $filter_weight\n";
    }
}

########## Begin: Filter sub routines ###########
sub plot_filter_h_lines {
    $gfx->linedash(1,5);
    # Draw Horizontal 1
    my $HOR_FILTER_1=$config->get('HOR_FILTER_1');
    my ( $x1, $y1 ) = &calculate_filter_plot_point (  $HOR_FILTER_1, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    my ( $x2, $y2 ) = &calculate_filter_plot_point ( $HOR_FILTER_1, $MAX_TIME );
    $gfx->line($x2,$y2);
    $gfx->textlabel($LEGEND_LEFT,$y1-$font_height/2,$font,$font_height,$HOR_FILTER_1);

    # Draw Horizontal 2
    my $HOR_FILTER_2=$config->get('HOR_FILTER_2');
    ( $x1, $y1 ) = &calculate_filter_plot_point (  $HOR_FILTER_2, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    ( $x2, $y2 ) = &calculate_filter_plot_point ( $HOR_FILTER_2, $MAX_TIME );
    $gfx->line($x2,$y2);
    $gfx->textlabel($LEGEND_LEFT,$y1-$font_height/2,$font,$font_height,$HOR_FILTER_2);

    # Draw Horizontal 3
    my $HOR_FILTER_3=$config->get('HOR_FILTER_3');
    ( $x1, $y1 ) = &calculate_filter_plot_point (  $HOR_FILTER_3, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    ( $x2, $y2 ) = &calculate_filter_plot_point ( $HOR_FILTER_3, $MAX_TIME );
    $gfx->line($x2,$y2);
    $gfx->textlabel($LEGEND_LEFT,$y1-$font_height/2,$font,$font_height,$HOR_FILTER_3);
    $gfx->stroke;

    # Draw Goal Line
    my $goal = &get_goal;
    ( $x1, $y1 ) = &calculate_filter_plot_point (  $goal, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    ( $x2, $y2 ) = &calculate_filter_plot_point ( $goal, $MAX_TIME );
    $gfx->line($x2,$y2);
    my $text = $goal . '->';
    my $fudge_left = -10;
    my $fudge_up = 2;
    $gfx->textlabel($LEGEND_LEFT+$fudge_left,$y1-$font_height/2+$fudge_up,$font,$font_height,$text);
    $gfx->linedash(1,0);
    $gfx->strokecolor('#0000FF');
    $gfx->stroke;
}

sub plot_filter_weights {
    $gfx->linedash(1,0);
    my $FILTER_DATA_FILE = $config->get('FILTER_DATA_FILE');
    open( my $OUT, '<', $FILTER_DATA_FILE ) or die "Unable to open data file: $!";
    $_ = <$OUT>;
    my ( $time, $weight ) = split();
    my ( $x, $y ) = &calculate_filter_plot_point ( $weight, $time );
    $gfx->move($x,$y);
    $gfx->circle($x,$y,$RADIUS);
    $gfx->move($x,$y);
    while (<$OUT>) {
	( $time, $weight ) = split;
	( $x, $y ) = &calculate_filter_plot_point ( $weight, $time );
	$gfx->line($x,$y);
	$gfx->circle($x,$y,$RADIUS);
	$gfx->move($x,$y);
    }
    $gfx->stroke;
    # Text last weight
    my $fudge_horizontal = 4;
    my $fudge_vertical = 2;
    my $text = '<-' . $weight;
    $gfx->textlabel($x+$fudge_horizontal,$y-$font_height/2+$fudge_vertical,$font,$font_height,$text);
    
}

sub filter_scale {
    my $points_per_pound =  ( $FILTER_TOP - $FILTER_BOTTOM ) / ( $FILTER_GRAPH_MAX_WEIGHT - $FILTER_GRAPH_MIN_WEIGHT );
    my $points_per_second = ( $VIEWPORT_RIGHT - $VIEWPORT_LEFT ) / ( $MAX_TIME - $MIN_TIME );
    return ( $points_per_second, $points_per_pound );
}

########## End: Filter sub routines ###########

sub plot_start_weight {
    my ( $x, $y ) = &calculate_plot_point ( $START_WEIGHT, $START_TIME );
    $gfx->circle($x,$y,$RADIUS);
}

sub plot_weights {
    open( my $OUT, '<', $SCALE_DATA_FILE ) or die "Unable to open data file: $!";
    $_ = <$OUT>;
    my ( $time, $weight ) = split();
    my ( $x, $y ) = &calculate_plot_point ( $weight, $time );
    $gfx->circle($x,$y,$RADIUS);
    $gfx->move($x,$y);
    while (<$OUT>) {
	my ( $time, $weight ) = split;
	( $x, $y ) = &calculate_plot_point ( $weight, $time );
	$gfx->line($x,$y);
	$gfx->circle($x,$y,$RADIUS);
	$gfx->move($x,$y);
    }
    $gfx->circle($x,$y,2);
    $gfx->stroke;
    close $OUT;
}

sub draw_rectangle {
    my ( $left, $right, $top, $bottom ) = @_;
    $gfx->move($left,$top);
    $gfx->line($right, $top);
    $gfx->line($right,$bottom);
    $gfx->line($left, $bottom);
    $gfx->line($left, $top);
    $gfx->stroke;
}

sub draw_goal_line {
    my $time = time;
    my $CALS_PER_DAY=$config->get('CALS_PER_DAY');
    my $GOAL_START_WEIGHT = $config->get('GOAL_START_WEIGHT');
    my ( $x1, $y1 ) = &calculate_plot_point (  $GOAL_START_WEIGHT, $GOAL_START_TIME );
    $gfx->move($x1,$y1);
    $gfx->linedash(2,4);

    my $goal_weight = $GOAL_START_WEIGHT - ( $MAX_TIME - $GOAL_START_TIME ) * ( $CALS_PER_DAY / 3500 / 86400 );
    my ( $x2, $y2 ) = &calculate_plot_point ( $goal_weight, $MAX_TIME );
    $gfx->line($x2,$y2);
    $gfx->stroke;
}

sub draw_top_goal_line {
    my $time = time;
    my $TOP_GOAL_WEIGHT=$config->get('TOP_GOAL_WEIGHT');
    my $TOP_GOAL_TIME=$config->get('TOP_GOAL_TIME');
    my $TOP_GOAL_CALORIES=$config->get('TOP_GOAL_CALORIES');
    my $TOP_GOAL_TEXT=$config->get('TOP_GOAL_TEXT');
    my $TOP_GOAL_TEXT_X_POINTS=$config->get('TOP_GOAL_TEXT_X_POINTS');
    my $TOP_GOAL_TEXT_Y_POINTS=$config->get('TOP_GOAL_TEXT_Y_POINTS');

    my ( $x, $y ) = &calculate_plot_point ( $TOP_GOAL_WEIGHT, $TOP_GOAL_TIME );
    $gfx->move($x,$y);
    my $goal_weight = $TOP_GOAL_WEIGHT - ( $MAX_TIME - $TOP_GOAL_TIME ) * ( $TOP_GOAL_CALORIES / 3500 / 86400 );
    my ( $x1, $y1 ) = &calculate_plot_point ( $goal_weight, $MAX_TIME );
    $gfx->line($x1,$y1);
    $gfx->linedash(1,0);
    $gfx->strokecolor('#00FF00');
    $gfx->stroke;
    $gfx->textlabel($TOP_GOAL_TEXT_X_POINTS,$TOP_GOAL_TEXT_Y_POINTS,$font,$font_height,$TOP_GOAL_TEXT);
    $gfx->strokecolor('#000000');
}

sub analysis {

    my $goal = &get_goal;
    my $text = "ANALYIS: Your low pass calculated weight of $XMAX is $YMAX less than your goal weight of $goal";
    $gfx->textlabel($XMAX,$YMAX,$font,$font_height,$text);
}

sub get_goal {
    my $time = time;
    my $TOP_GOAL_WEIGHT=$config->get('TOP_GOAL_WEIGHT');
    my $TOP_GOAL_TIME=$config->get('TOP_GOAL_TIME');
    my $TOP_GOAL_CALORIES=$config->get('TOP_GOAL_CALORIES');
    my $elapsed_days = ( $time  - $TOP_GOAL_TIME  ) / 86400;

    my $goal_weight = $TOP_GOAL_WEIGHT - ( $TOP_GOAL_CALORIES * $elapsed_days ) / 3500;
    $goal_weight = sprintf( "%.2f", $goal_weight);
    return $goal_weight;
}

#### Filter weight portal
&draw_rectangle( $VIEWPORT_LEFT, $VIEWPORT_RIGHT, $FILTER_TOP, $FILTER_BOTTOM );
&plot_filter_weights;
&plot_filter_h_lines;

&draw_legend;
&analysis;

my $jpeg = $pdf->image_jpeg('flower.jpeg');
$gfx->image( $jpeg, $XMAX+50, $YMAX+50, 220, 201 );

sub draw_legend {
    ################# Text ##########
    my ( $x, $y ) = &calculate_plot_point ( $MAX_WEIGHT, 0);
    $gfx->textlabel($LEGEND_LEFT,$y-$font_height/2,$font,$font_height,$MAX_WEIGHT);
    ( $x, $y ) = &calculate_plot_point ( $MIN_WEIGHT, 0);
    $gfx->textlabel($LEGEND_LEFT,$y-$font_height/2,$font,$font_height,$MIN_WEIGHT);
#    $gfx->textlabel($TEXT_LEFT,$TEXT_TOP,$font,$font_height,"Troy Will");
#    my $current_goal = sprintf( "%.2f", $Marv::Statistics::Current_goal);
#    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-$font_height),$font,$font_height,  "Current Goal: $current_goal");
# $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-$font_height),$font,$font_height,  "Beginning Unix Time: ");
#    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-2*$font_height),$font,$font_height,"Beginning Weight: 183.6");
    chomp( my $date = `date` );
    my $string = 'Current Unix Time: ' . time . " ($date)";
    my $UNIXTIME_X = $config_graph->get('UNIXTIME_X');
    my $UNIXTIME_Y = $config_graph->get('UNIXTIME_Y');
    $gfx->textlabel($UNIXTIME_X,($UNIXTIME_Y-3*$font_height),$font,$font_height,$string);
#    TDW
#    $gfx->textlabel($TEXT_LEFT,($TEXT_TOP-4*$font_height),$font,$font_height,"Current Weight: $current_goal");
}

sub calculate_filter_plot_point {
    my ( $weight, $time ) = @_;
    my ( $xscale, $yscale ) = &filter_scale;
    my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );
    my $y = $FILTER_BOTTOM + $yscale * ( $weight - $FILTER_GRAPH_MIN_WEIGHT );
    return ( $x, $y );
}

sub calculate_plot_point {
    my ( $weight, $time ) = @_;
    my ( $xscale, $yscale ) = &scale;
    my $x = $VIEWPORT_LEFT + $xscale * ( $time - $MIN_TIME );
    my $y = $VIEWPORT_BOTTOM + $yscale * ( $weight - $MIN_WEIGHT );
    return ( $x, $y );
}
