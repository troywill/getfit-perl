#!/usr/bin/env perl
use warnings;
use strict;
use SVG;

# create an SVG object
my $svg= SVG->new(width=>800,height=>480);

# use explicit element constructor to generate a group element
my $y=$svg->group(
		  id    => 'group_y',
		  style => { stroke=>'green', fill=>'green' }
		 );

# add a circle to the group
# $y->circle(cx=>200, cy=>100, r=>50, id=>'circle_in_group_y');
# $y->line(    id=>'line_1',    x1=>0, y1=>0,    x2=>0, y2=>480    );

# a 10-pointsaw-tooth pattern
my ( $LEFT, $RIGHT, $BOTTOM, $TOP ) = ( 0, 800, 0, 480 );


my $xv = [$LEFT,  $LEFT,$RIGHT,$RIGHT,$LEFT];
my $yv = [$BOTTOM,$TOP, $TOP,  $BOTTOM,$BOTTOM];

my $points = $y->get_path( x=>$xv, y=>$yv, -type=>'polyline', -closed=>'true' );

my $tag = $y->polyline (
    %$points,
    id=>'pline_1',
    style=>{	'fill-opacity'=>0,	'stroke-color'=>'rgb(250,123,23)'    }
    );


# my $tag = $svg->line(    id=>'l1',    x1=>0, y1=>10,    x2=>10, y2=>0    );


# or, use the generic 'tag' method to generate a group element by name
my $z=$svg->tag('g',
		id    => 'group_z',
		style => {
			  stroke => 'rgb(100,200,50)',
			  fill   => 'rgb(10,100,150)'
			 }
	       );

# create and add a circle using the generic 'tag' method
# $z->tag('circle', cx=>50, cy=>50, r=>100, id=>'circle_in_group_z');

# create an anchor on a rectangle within a group within the group z
# my $k = $z->anchor( id => 'anchor_k', -href => 'http://www.google.com/', -target => 'new_window_0' )->rectangle(
# 			       x     => 20, y      => 50,
# 			       width => 20, height => 30,
# 			       rx    => 10, ry     => 5,
# 			       id    => 'rect_k_in_anchor_k_in_group_z'
# 			      );

# now render the SVG object, implicitly use svg namespace
# print $svg->xmlify;

# or render a child node of the SVG object without rendering the entire object
# print $k->xmlify; #renders the anchor $k above containing a rectangle, but does not
#render any of the ancestor nodes of $k


# or, explicitly use svg namespace and generate a document with its own DTD
# print $svg->xmlify(-namespace=>'svg');

# or, explicitly use svg namespace and generate an in-line docunent
open ( my $out, '>', '/stow/marvredshaw/srv/http/marv.svg');

print $out $svg->xmlify(-namespace => "svg",-pubid => "-//W3C//DTD SVG 1.0//EN", -inline   => 1 );
